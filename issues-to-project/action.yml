# Add issue to the Project (beta) board if they are not there yet.
#
# Project (beta) is called ProjectNext in GraphQL API.
#
# Based on PR management example in GH docs page.
# @see https://docs.github.com/en/issues/trying-out-the-new-projects-experience/automating-projects
#
# Note: GITHUB_TOKEN does not have the necessary scopes to access projects (beta).
# You must create a token with org:write scope and save it as a secret in your repository or organization.
# This workflow assumes the token is stored as organisation (or repository) secret GH_ACTIONS_TOKEN.
# @see https://docs.github.com/en/issues/trying-out-the-new-projects-experience/automating-projects#introduction
# @see https://docs.github.com/en/graphql/guides/forming-calls-with-graphql#authenticating-with-graphql

name: 'Add issues to project'
description: 'Add new issues to project'
inputs:
  token:
    description: "Github token"
    required: true
  organization:
    description: "Project's organization"
    required: false
    default: "Yleisradio"
  project-id:
    description: "Id of the GH project"
    required: true
  target-column:
    description: "Kanban board target column for the issues"
    required: false
    default: "Backlog"
  issue-id:
    description: "Id of the new issue"
    required: true
runs:
  using: composite
  steps:
    - name: Get project and field data
      id: requesting_project_data
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        ORGANIZATION: ${{ inputs.organization }}
        PROJECT_NUMBER: ${{ inputs.project-id }}
        TARGET_COLUMN: ${{ inputs.target-column }}
        ISSUE_ID: ${{ inputs.issue-id }}
      shell: bash
      run: |
        gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
          query($org: String!, $number: Int!) {
            organization(login: $org){
              projectNext(number: $number) {
                id
                fields(first:20) {
                  nodes {
                    id
                    name
                    settings
                  }
                }
              }
            }
          }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

        echo 'PROJECT_ID='$( jq --raw-output '.data.organization.projectNext.id' project_data.json ) | tee -a $GITHUB_ENV
        echo 'STATUS_FIELD_ID='$( jq --raw-output '.data.organization.projectNext.fields.nodes[] | select(.name== "Status") | .id' project_data.json ) | tee -a $GITHUB_ENV
        echo 'STATUS_FIELD_VALUE_ID='$( jq  --raw-output '.data.organization.projectNext.fields.nodes[] | select(.name== "Status") |.settings | fromjson.options[] | select(.name=="${{ env.TARGET_COLUMN }}") |.id' project_data.json ) | tee -a $GITHUB_ENV

    - name: Check if issue is not yet on project board
      id: check_if_added_to_projectnext
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        ORGANIZATION: ${{ inputs.organization }}
        PROJECT_NUMBER: ${{ inputs.project-id }}
        TARGET_COLUMN: ${{ inputs.target-column }}
        ISSUE_ID: ${{ inputs.issue-id }}
      shell: bash
      run: |
        echo "Looking for issue $ISSUE_ID in project $PROJECT_ID"

        gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
          query ($project_id: ID!) {
            node(id: $project_id) {
              ... on ProjectNext {
                items(first: 100) {
                  nodes {
                    content {
                      ...on Issue {
                        id
                      }
                    }
                  }
                }
              }
            }
          }' -f project_id=$PROJECT_ID --jq '.data.node.items.nodes[].content.id' > project_issues.txt

        # Note: grep --count seems to cause non-zero exit status in GH action when no results are found.
        EXISTS=$(grep -c "$ISSUE_ID" project_issues.txt || echo 0)

        echo "EXISTS (output) =${EXISTS}"
        echo "::set-output name=EXISTS::$EXISTS"

    # Note:
    # You cannot add and update an item in the same call. You must use
    # `addProjectNextItem` to add the item and then use
    # `updateProjectNextItemField` to update the item.
    # @see https://docs.github.com/en/issues/trying-out-the-new-projects-experience/using-the-api-to-manage-projects#adding-an-item-to-a-project
    - name: Add Issue to the project board
      if: steps.check_if_added_to_projectnext.outputs.EXISTS == 0
      id: add_issue_to_project
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        ORGANIZATION: ${{ inputs.organization }}
        PROJECT_NUMBER: ${{ inputs.project-id }}
        TARGET_COLUMN: ${{ inputs.target-column }}
        ISSUE_ID: ${{ inputs.issue-id }}
      shell: bash
      run: |
        item_id="$( gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
          mutation ($project_id: ID!, $content_id: ID!) {
            addProjectNextItem(input: {projectId: $project_id, contentId: $content_id }) {
              projectNextItem {
                id
              }
            }
          }' -f project_id=$PROJECT_ID  -f content_id=$ISSUE_ID --jq '.data.addProjectNextItem.projectNextItem.id')"

        echo "ITEM_ID="${item_id} | tee -a $GITHUB_ENV

    # Note:
    # Keep --include option to see response headers in Action logs.
    # It may be useful if the token expires or does not have all credentials it needs since
    # response headers reveal for example current token scope, accepted scope and also API
    # ratelimit usage information.
    - name: Update the status field (ie. set the kanban column)
      if: steps.check_if_added_to_projectnext.outputs.EXISTS == 0
      id: set_issue_status_to_project_column
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        ORGANIZATION: ${{ inputs.organization }}
        PROJECT_NUMBER: ${{ inputs.project-id }}
        TARGET_COLUMN: ${{ inputs.target-column }}
        ISSUE_ID: ${{ inputs.issue-id }}
      shell: bash
      run: |
        gh api graphql --include --header 'GraphQL-Features: projects_next_graphql' -f query='
        mutation (
          $project: ID!
          $item: ID!
          $status_field: ID!
          $status_value: String!
        ) {
          set_status: updateProjectNextItemField ( input: {
            projectId: $project
            itemId: $item
            fieldId: $status_field
            value: $status_value
          }) {
            projectNextItem {
              id
            }
          }
        }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=$STATUS_FIELD_VALUE_ID
